SAM --> Single Abstract method
Functional Interface -> This is a spl interface which will be having only one abstract method
In jdk 1.8, Java has introduced one annotation called @FunctionalInterface.
This will be having only one abstract method.
Static and default methods are allowed

Interface Function<T,R>
Type Parameters:
T - the type of the input to the function
R - the type of the result of the function

Interface BinaryOperator<T>
Type Parameters:
T - the type of the operands and result of the operator
@FunctionalInterface
public interface BinaryOperator<T> extends BiFunction<T,T,T>
Represents an operation upon two operands of the same type, producing a result of the same type as the operands.
This is a specialization of BiFunction for the case where the operands and the result are all of the same type.
This is a functional interface whose functional method is BiFunction.apply(Object, Object).

Interface UnaryOperator<T>
Type Parameters:
T - the type of the operand and result of the operator
@FunctionalInterface
public interface UnaryOperator<T> extends Function<T,T>
Represents an operation on a single operand that produces a result of the same type as its operand.
This is a specialization of Function for the case where the operand and result are of the same type.
This is a functional interface whose functional method is Function.apply(Object).

Interface Predicate<T>
Type Parameters:
T - the type of the input to the predicate
Represents a predicate (boolean-valued function) of one argument.
This is a functional interface whose functional method is test(Object).

Interface Consumer<T>
Type Parameters:
T - the type of the input to the operation
It will take one operand and it will return void
Represents an operation that accepts a single input argument and returns no result.
Unlike most other functional interfaces, Consumer is expected to operate via side-effects.
This is a functional interface whose functional method is accept(Object).

Interface Supplier<T>
Type Parameters:
T - the type of results supplied by this supplier
There is no requirement that a new or distinct result be returned each time the supplier is invoked.
This is a functional interface whose functional method is get().
This interface won;t take any operands but it will give results.


Interface Iterable<T>
Type Parameters:
T - the type of elements returned by the iterator
Implementing this interface allows an object to be the target of the "for-each loop" statement. See For-each Loop

Modifier and Type  --> Method and Description
default void ->forEach(Consumer<? super T> action)
Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.

Iterator<T>	--> iterator()
Returns an iterator over elements of type T.

default Spliterator<T>	spliterator()
Creates a Spliterator over the elements described by this Iterable.